# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: videolyzer-pipeline
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.7
  stage: dev-us-east-1
  profile: ${file(../config/config.${self:provider.stage}.json):videolyzer.aws_profile_name}
  region: ${file(../config/config.${self:provider.stage}.json):videolyzer.aws_region_name}
  iamRoleStatements:  
    - Effect: "Allow"
      Action:
        - "rekognition:*"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
      Resource: 
        - Fn::Join:
          - ''
          - - ${self:custom.videos-bucket-arn}
            - '/*'
    - Effect: "Allow"
      Action:
        - iam:GetRole
        - iam:PassRole
      Resource:
        Fn::GetAtt:
          - RekognitionSNSPublishRole
          - Arn 
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
      Resource:
        Fn::GetAtt:
          - VideosDbTable
          - Arn
      
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.videos-db-table-name}
    DYNAMODB_PUT_THRESHOLD: ${self:custom.dynamodb-put-threshold}
    REKOGNITION_SNS_TOPIC_ARN: ${self:custom.rekognition-sns-topic-arn}
    REKOGNITION_SNS_ROLE_ARN:
      Fn::GetAtt:
        - RekognitionSNSPublishRole
        - Arn

custom:
  dynamodb-put-threshold: ${file(../config/config.${self:provider.stage}.json):videolyzer.dynamodb_put_threshold}
  videos-db-table-name: ${file(../config/config.${self:provider.stage}.json):videolyzer.videos_dynamodb_table}
  rekognition-sns-topic-arn:
    Fn::Join:
      - ':'
      - - arn
        - aws
        - sns
        - Ref: AWS::Region
        - Ref: AWS::AccountId
        - handleLabelDetectionTopic
  videos-bucket-arn:
    Fn::Join:
      - ':'
      - - arn
        - aws
        - s3
        - ''
        - ''
        - ${file(../config/config.${self:provider.stage}.json):videolyzer.videos_s3_bucket_name}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  start-processing-video:
    handler: handler.start_processing_video
    events:
      - s3:
          bucket: ${file(../config/config.${self:provider.stage}.json):videolyzer.videos_s3_bucket_name}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .mp4
  handle-label-detection:
    handler: handler.handle_label_detection
    events:
      - sns: handleLabelDetectionTopic

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
  Resources:
    RekognitionSNSPublishRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - rekognition.amazonaws.com 
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: RekognitionSNSPublishPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement: 
                - Effect: Allow
                  Action:
                    - sns:Publish
                  Resource: ${self:custom.rekognition-sns-topic-arn}
    VideosDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.videos-db-table-name}
        AttributeDefinitions:
          - AttributeName: VideoName
            AttributeType: S
        KeySchema:
          - AttributeName: VideoName
            KeyType: HASH 
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
